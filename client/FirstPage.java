package client;


import java.awt.Component;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class FirstPage extends javax.swing.JFrame {

    /**
     * Creates new form FirstPage
     */
    public FirstPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textInput = new javax.swing.JTextField();
        connect = new javax.swing.JButton();
        processRunning = new javax.swing.JButton();
        appRunning = new javax.swing.JButton();
        tatMay = new javax.swing.JButton();
        chupManHinh = new javax.swing.JButton();
        keystroke = new javax.swing.JButton();
        thoat = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        textInput.setText("Nhập IP");

        connect.setText("Kết nối");
        connect.setName(""); // NOI18N
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        processRunning.setText("Process Running");
        processRunning.setToolTipText("");
        processRunning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processRunningActionPerformed(evt);
            }
        });

        appRunning.setText("App Running");
        appRunning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appRunningActionPerformed(evt);
            }
        });

        tatMay.setText("Tắt Máy");
        tatMay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tatMayActionPerformed(evt);
            }
        });

        chupManHinh.setText("Chụp Màn Hình");
        chupManHinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chupManHinhActionPerformed(evt);
            }
        });

        keystroke.setText("Keystroke");
        keystroke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keystrokeActionPerformed(evt);
            }
        });

        thoat.setText("Thoát");
        thoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thoatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(processRunning)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tatMay, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chupManHinh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(appRunning, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(textInput))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(thoat, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connect, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keystroke, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(processRunning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(keystroke, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thoat, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(appRunning, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tatMay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chupManHinh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static public String text = "";
    public static Boolean Connect = false;
    public static Socket client = null;
    public InetAddress ipServer;

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        try {
            text = textInput.getText();

            connectClient a = new connectClient();

            ObjectOutputStream oos = null;

            Socket socket = a.connect();
            
            oos = new ObjectOutputStream(socket.getOutputStream());

            oos.writeObject("connect");

            System.out.print(socket);
            if(socket != null){
                Connect = true;
                JOptionPane.showMessageDialog(rootPane, "kết nối đến server thành công");
            }
            
        } catch (IOException ex) {
            Logger.getLogger(FirstPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_connectActionPerformed

    private void processRunningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processRunningActionPerformed
        if (Connect == true) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    JFrame f = new processRunning();
                    f.setVisible(true);
                    f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                }
            });
        } else {
            JOptionPane.showMessageDialog(rootPane, "Chưa kết nối đến server");
        }
    }//GEN-LAST:event_processRunningActionPerformed

    private void appRunningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appRunningActionPerformed
        if (Connect == true) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    JFrame f = new AppRunning();
                    f.setVisible(true);
                    f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                }
            });
        } else {
            JOptionPane.showMessageDialog(rootPane, "Chưa kết nối đến server");
        }
    }//GEN-LAST:event_appRunningActionPerformed

    private void tatMayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tatMayActionPerformed
        if (Connect == true) {
            requestServer r = new requestServer();
            r.request("shutdown");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Chưa kết nối đến server");
        }
    }//GEN-LAST:event_tatMayActionPerformed

    private void chupManHinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chupManHinhActionPerformed
        if (Connect == true) {
            requestServer r = new requestServer();
            r.request("screenShot");

            ScreenShot s = new ScreenShot();
            try {
                s.screenShot();
            } catch (Exception ex) {
                Logger.getLogger(FirstPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Chưa kết nối đến server");
        }
    }//GEN-LAST:event_chupManHinhActionPerformed

    private void keystrokeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keystrokeActionPerformed
        if (Connect == true) {
            //do some thing
            requestServer r = new requestServer();
            r.request("keyloger");
            
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(() -> {
                new keyloger().setVisible(true);
            });
            
            
        } else {
            JOptionPane.showMessageDialog(rootPane, "Chưa kết nối đến server");
        }
    }//GEN-LAST:event_keystrokeActionPerformed

    private void thoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thoatActionPerformed
        Component frame = null;
        if (JOptionPane.showConfirmDialog(frame,
                "Are you sure you want to close this window?", "Close Window?",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_thoatActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton appRunning;
    private javax.swing.JButton chupManHinh;
    private javax.swing.JButton connect;
    private javax.swing.JButton keystroke;
    private javax.swing.JButton processRunning;
    private javax.swing.JButton tatMay;
    public javax.swing.JTextField textInput;
    private javax.swing.JButton thoat;
    // End of variables declaration//GEN-END:variables

    private void ScreenShot(Socket client) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
